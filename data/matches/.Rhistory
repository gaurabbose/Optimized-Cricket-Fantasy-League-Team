View(dataset)
View(bowler_stats)
is.na(bowler_stats$totalRuns) <- 0
View(bowler_stats)
for(i in bowling_list$Player){
count_i = count_i + 1
count_j = 0
for(j in bowler_stats$dataset.bowler){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
bowling_list$score[count_i] <- bowling_list$score[count_i] +
(20*bowler_stats$dataset.wicketKind[count_j]/bowler_stats$x[count_j]) +
economy_calc(bowler_stats$totalRuns[count_j]/bowler_stats$x[count_j])
log=TRUE
}
}
}
economy_calc(bowler_stats$totalRuns[count_j]
bowler_stats$totalRuns[count_j]
# Aggregating by bowler and year
bowler_stats <- cbind(aggregate(bowling_data[,2:11],bowling_data[c("dataset.bowler","dataset.year")], FUN = sum),
aggregate(bowling_data[,12],bowling_data[c("dataset.bowler","dataset.year")], FUN = function(x) length(unique(x))))
is.na(bowler_stats$totalRuns) <- 0
# Expected scoring system
bowling_list <- data.frame(read.csv("C:/Users/fm114rt/Documents/R Projects/IPL/data/player_cost.csv"))
View(bowler_stats)
bowler_stats <- bowler_stats[complete.cases(bowler_stats$totalRuns), ]
# Aggregating by bowler and year
bowler_stats <- cbind(aggregate(bowling_data[,2:11],bowling_data[c("dataset.bowler","dataset.year")], FUN = sum),
aggregate(bowling_data[,12],bowling_data[c("dataset.bowler","dataset.year")], FUN = function(x) length(unique(x))))
# Check if 'not-out' or 'out'
bowling_data$dataset.wicketKind <- ifelse(bowling_data$dataset.wicketKind == "not-out", 0, 1)
# Aggregating by bowler and year
bowler_stats <- cbind(aggregate(bowling_data[,2:11],bowling_data[c("dataset.bowler","dataset.year")], FUN = sum),
aggregate(bowling_data[,12],bowling_data[c("dataset.bowler","dataset.year")], FUN = function(x) length(unique(x))))
bowling_data[c("dataset.bowler","dataset.year")]
View(bowling_data)
# Extract year from date
bowling_data$dataset.year <- substring(bowling_data$dataset.date,1,4)
# Abbreviate team name
for(i in 1:145285){
if(dataset$team[i] == dataset$team1[i]){
dataset$teamBowler[i] <- dataset$team2[i]
}
else{
dataset$teamBowler[i] <- dataset$team1[i]
}
}
dataset <- read.csv("C:/Users/fm114rt/Documents/R Projects/IPL/data/dataset.csv", header = TRUE)
dataset <- dataset[-1]
#Print first 10 rows of master data
head(dataset)
# Extract relevant part of dataframe
bowling_data <- data.frame(cbind(dataset$bowler,dataset[,6:14], dataset$wicketKind), dataset$date, stringsAsFactors = FALSE)
# Extract year from date
bowling_data$dataset.year <- substring(bowling_data$dataset.date,1,4)
# Check if 'not-out' or 'out'
bowling_data$dataset.wicketKind <- ifelse(bowling_data$dataset.wicketKind == "not-out", 0, 1)
# Aggregating by bowler and year
bowler_stats <- cbind(aggregate(bowling_data[,2:11],bowling_data[c("dataset.bowler","dataset.year")], FUN = sum),
aggregate(bowling_data[,12],bowling_data[c("dataset.bowler","dataset.year")], FUN = function(x) length(unique(x))))
bowler_stats <- bowler_stats[complete.cases(bowler_stats$totalRuns), ]
# Expected scoring system
bowling_list <- data.frame(read.csv("C:/Users/fm114rt/Documents/R Projects/IPL/data/player_cost.csv"))
bowling_list$score <- 0
count_i = 0
for(i in bowling_list$Player){
count_i = count_i + 1
count_j = 0
for(j in bowler_stats$dataset.bowler){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
bowling_list$score[count_i] <- bowling_list$score[count_i] +
(20*bowler_stats$dataset.wicketKind[count_j]/bowler_stats$x[count_j]) +
economy_calc(bowler_stats$totalRuns[count_j]/bowler_stats$x[count_j])
log=TRUE
}
}
}
dataset <- read.csv("C:/Users/fm114rt/Documents/R Projects/IPL/data/dataset.csv", header = TRUE)
dataset <- dataset[-1]
#Print first 10 rows of master data
head(dataset)
# Extract relevant part of dataframe
bowling_data <- data.frame(cbind(dataset$bowler,dataset[,6:14], dataset$wicketKind), dataset$date, stringsAsFactors = FALSE)
# Extract year from date
bowling_data$dataset.year <- substring(bowling_data$dataset.date,1,4)
# Check if 'not-out' or 'out'
bowling_data$dataset.wicketKind <- ifelse(bowling_data$dataset.wicketKind == "not-out", 0, 1)
# Aggregating by bowler and year
bowler_stats <- cbind(aggregate(bowling_data[,2:11],bowling_data[c("dataset.bowler","dataset.year")], FUN = sum),
aggregate(bowling_data[,12],bowling_data[c("dataset.bowler","dataset.year")], FUN = function(x) length(unique(x))))
bowler_stats <- bowler_stats[complete.cases(bowler_stats$totalRuns), ]
# Expected scoring system
bowling_list <- data.frame(read.csv("C:/Users/fm114rt/Documents/R Projects/IPL/data/player_cost.csv"))
bowling_list$score <- 0
count_i = 0
for(i in bowling_list$Player){
count_i = count_i + 1
count_j = 0
for(j in bowler_stats$dataset.bowler){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
bowling_list$score[count_i] <- bowling_list$score[count_i] +
(20*bowler_stats$dataset.wicketKind[count_j]/bowler_stats$x[count_j]) +
economy_calc(bowler_stats$totalRuns[count_j]/bowler_stats$x[count_j])
log=TRUE
}
}
}
View(bowling_list)
View(dataset)
encode <- function(year){
if(year == 2008){
return(0.2)
}
if(year == 2009){
return(0.4)
}
if(year == 2010){
return(0.6)
}
if(year == 2011){
return(0.8)
}
if(year == 2012){
return(0.9)
}
if(year == 2013){
return(0.95)
}
else
return(1)
}
for(i in bowling_list$Player){
count_i = count_i + 1
count_j = 0
for(j in bowler_stats$dataset.bowler){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
bowling_list$score[count_i] <- encode(bowler_stats$dataset.year[count_j])*(bowling_list$score[count_i] +
(20*bowler_stats$dataset.wicketKind[count_j]/bowler_stats$x[count_j]) +
economy_calc(bowler_stats$totalRuns[count_j]/bowler_stats$x[count_j]))
log=TRUE
}
}
}
bowler_stats$dataset.year[count_j]
encode(bowler_stats$dataset.year[count_j])
for(i in bowling_list$Player){
count_i = count_i + 1
count_j = 0
for(j in bowler_stats$dataset.bowler){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
bowling_list$score[count_i] <- bowling_list$score[count_i] +
(encode(bowler_stats$dataset.year[count_j])*
((20*bowler_stats$dataset.wicketKind[count_j]/bowler_stats$x[count_j]) +
economy_calc(bowler_stats$totalRuns[count_j]/bowler_stats$x[count_j])))
log=TRUE
}
}
}
count_i = 0
for(i in bowling_list$Player){
count_i = count_i + 1
count_j = 0
for(j in bowler_stats$dataset.bowler){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
bowling_list$score[count_i] <- bowling_list$score[count_i] +
(encode(bowler_stats$dataset.year[count_j])*
((20*bowler_stats$dataset.wicketKind[count_j]/bowler_stats$x[count_j]) +
economy_calc(bowler_stats$totalRuns[count_j]/bowler_stats$x[count_j])))
log=TRUE
}
}
}
# Aggregate stats for batsman
# Extract relevant part of dataframe
batting_data <- data.frame(cbind(dataset$batsman,dataset[,6:14], dataset$wicketKind), dataset$date, stringsAsFactors = FALSE)
# Extract year from date
batting_data$dataset.year <- substring(batting_data$dataset.date,1,4)
View(batting_data)
# Aggregating by bowler and year
batsman_stats <- cbind(aggregate(batting_data[,2:10],bowling_data[c("dataset.batsman","dataset.year")], FUN = sum),
aggregate(batting_data[,12],batting_data[c("dataset.batsman","dataset.year")], FUN = function(x) length(unique(x))))
# Aggregating by bowler and year
batsman_stats <- cbind(aggregate(batting_data[,2:10],batting_data[c("dataset.batsman","dataset.year")], FUN = sum),
aggregate(batting_data[,12],batting_data[c("dataset.batsman","dataset.year")], FUN = function(x) length(unique(x))))
batsman_stats <- batsman_stats[complete.cases(batsman_stats$totalRuns), ]
# Expected scoring system
list <- data.frame(read.csv("C:/Users/fm114rt/Documents/R Projects/IPL/data/player_cost.csv"))
list$score <- 0
#Scoring algorithm
count_i = 0
for(i in list$Player){
count_i = count_i + 1
count_j = 0
for(j in bowler_stats$dataset.bowler){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
list$score[count_i] <- list$score[count_i] +
(encode(bowler_stats$dataset.year[count_j])*
((20*bowler_stats$dataset.wicketKind[count_j]/bowler_stats$x[count_j]) +
economy_calc(bowler_stats$totalRuns[count_j]/bowler_stats$x[count_j])))
log=TRUE
}
}
}
# Aggregate stats for batsman
# Extract relevant part of dataframe
batting_data <- data.frame(cbind(dataset$batsman,dataset[,6:14], dataset$wicketKind), dataset$date, stringsAsFactors = FALSE)
# Extract year from date
batting_data$dataset.year <- substring(batting_data$dataset.date,1,4)
# Aggregating by bowler and year
batsman_stats <- cbind(aggregate(batting_data[,2:10],batting_data[c("dataset.batsman","dataset.year")], FUN = sum),
aggregate(batting_data[,12],batting_data[c("dataset.batsman","dataset.year")], FUN = function(x) length(unique(x))))
batsman_stats <- batsman_stats[complete.cases(batsman_stats$totalRuns), ]
View(list)
View(batsman_stats)
# Aggregating by bowler and year
batsman_stats <- cbind(aggregate(batting_data[,2:10],batting_data[c("dataset.batsman","dataset.year")], FUN = sum),
aggregate(batting_data[,12],batting_data[c("dataset.batsman","dataset.year")], FUN = function(x) length(unique(x))),
aggregate(batting_data[,1],batting_data[c("dataset.batsman","dataset.year")], FUN = function(balls_faced) length(unique(balls_faced))))
# Aggregate stats for batsman
# Extract relevant part of dataframe
batting_data <- data.frame(cbind(dataset$batsman,dataset[,6:14], dataset$wicketKind), dataset$date, stringsAsFactors = FALSE)
# Extract year from date
batting_data$dataset.year <- substring(batting_data$dataset.date,1,4)
# Aggregating by bowler and year
batsman_stats <- cbind(aggregate(batting_data[,2:10],batting_data[c("dataset.batsman","dataset.year")], FUN = sum),
aggregate(batting_data[,12],batting_data[c("dataset.batsman","dataset.year")], FUN = function(x) length(unique(x))),
aggregate(batting_data[,1],batting_data[c("dataset.batsman","dataset.year")], FUN = function(balls_faced) length(unique(balls_faced))))
# Aggregate stats for batsman
# Extract relevant part of dataframe
batting_data <- data.frame(cbind(dataset$batsman,dataset[,6:14], dataset$wicketKind), dataset$date, dataset$ball, stringsAsFactors = FALSE)
# Extract year from date
batting_data$dataset.year <- substring(batting_data$dataset.date,1,4)
# Aggregating by bowler and year
batsman_stats <- cbind(aggregate(batting_data[,2:10],batting_data[c("dataset.batsman","dataset.year")], FUN = sum),
aggregate(batting_data[,12],batting_data[c("dataset.batsman","dataset.year")], FUN = function(x) length(unique(x))),
aggregate(batting_data$ball,batting_data[c("dataset.batsman","dataset.year")], FUN = function(balls_faced) length(unique(balls_faced))))
# Aggregating by bowler and year
batsman_stats <- cbind(aggregate(batting_data[,2:10],batting_data[c("dataset.batsman","dataset.year")], FUN = sum),
aggregate(batting_data[,12],batting_data[c("dataset.batsman","dataset.year")], FUN = function(x) length(unique(x))),
aggregate(batting_data$dataset.ball,batting_data[c("dataset.batsman","dataset.year")], FUN = function(balls_faced) length(unique(balls_faced))))
batsman_stats$x
batsman_stats[,17][2]
list$score[count_i] <- list$score[count_i] +
(encode(batsman_stats$dataset.year[count_j])*
((batsman_stats$dataset.wicketKind[count_j]/batsman_stats$x[count_j]) +
strike_calc(batsman_stats$totalRuns/(batsman_stats[,17][count_j]*batsman_stats$x[count_j]))))
strike_calc <- function(rate){
if(rate < 75){
return(-15)
}
if(rate < 100){
return(-10)
}
if(rate < 150){
return(5)
}
if(rate < 200){
return(10)
}
else
return(15)
}
#Scoring algorithm
count_i = 0
for(i in list$Player){
count_i = count_i + 1
count_j = 0
for(j in batsman_stats$dataset.batsman){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
list$score[count_i] <- list$score[count_i] +
(encode(batsman_stats$dataset.year[count_j])*
((batsman_stats$dataset.wicketKind[count_j]/batsman_stats$x[count_j]) +
strike_calc(batsman_stats$totalRuns/(batsman_stats[,17][count_j]*batsman_stats$x[count_j]))))
}
}
}
list$score[count_i]
(encode(batsman_stats$dataset.year[count_j])
encode(batsman_stats$dataset.year[count_j])
batsman_stats$dataset.wicketKind[count_j]/batsman_stats$x[count_j]
strike_calc(batsman_stats$totalRuns/(batsman_stats[,17][count_j]*batsman_stats$x[count_j]))
batsman_stats$totalRuns/(batsman_stats[,17][count_j]*batsman_stats$x[count_j]
batsman_stats$totalRuns/(batsman_stats[,17][count_j]*batsman_stats$x[count_j])
batsman_stats$totalRuns/(batsman_stats[,17][count_j]*batsman_stats$x[count_j])
batsman_stats$totalRuns[count_j]/(batsman_stats[,17][count_j]*batsman_stats$x[count_j])
batsman_stats$dataset.wicketKind[count_j]/batsman_stats$x[count_j]
batsman_stats$x[count_j]
batsman_stats$dataset.wicketKind[count_j]
#Scoring algorithm
count_i = 0
for(i in list$Player){
count_i = count_i + 1
count_j = 0
for(j in batsman_stats$dataset.batsman){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
list$score[count_i] <- list$score[count_i] +
(encode(batsman_stats$dataset.year[count_j])*
((batsman_stats$totalRuns[count_j]/batsman_stats$x[count_j]) +
strike_calc(batsman_stats$totalRuns[count_j]/(batsman_stats[,17][count_j]*batsman_stats$x[count_j]))))
}
}
}
batsman_stats$totalRuns[count_j]/(batsman_stats[,17][count_j]*batsman_stats$x[count_j]
batsman_stats$totalRuns[count_j]/(batsman_stats[,17][count_j]*batsman_stats$x[count_j])
batsman_stats$totalRuns[count_j]/(batsman_stats[,17][count_j]*batsman_stats$x[count_j])
batsman_stats$totalRuns[count_j]/(batsman_stats[,17][count_j]*batsman_stats$x[count_j])
batsman_stats$totalRuns[count_j]/(batsman_stats[,17][count_j]*batsman_stats$x[count_j])
batsman_stats$totalRuns[count_j]
batsman_stats <- batsman_stats[complete.cases(batsman_stats$totalRuns), ]
#Scoring algorithm
count_i = 0
for(i in list$Player){
count_i = count_i + 1
count_j = 0
for(j in batsman_stats$dataset.batsman){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
list$score[count_i] <- list$score[count_i] +
(encode(batsman_stats$dataset.year[count_j])*
((batsman_stats$totalRuns[count_j]/batsman_stats$x[count_j]) +
strike_calc(batsman_stats$totalRuns[count_j]/(batsman_stats[,17][count_j]*batsman_stats$x[count_j]))))
}
}
}
View(list)
library(lpSolve)
install.packages("lpSovle")
install.packages("lpSolve")
library(lpSolve)
View(list)
library(lpSolve)
obj_fun <- list$score
constraints <- matrix(list$cost, nrow = 1)
View(list)
constraints <- matrix(list$Cost, nrow = 1)
c_dir <- "<="
c_rhs <- 10000000
lp <- lp("max",
obj_fun,
constraints,
c_dir,
c_rhs,
all.bin = TRUE)
df[lp$solution == 1, ]
list[lp$solution == 1, ]
list$playerType <- 0
#Scoring algorithm
count_i = 0
for(i in list$Player){
count_i = count_i + 1
count_j = 0
for(j in bowler_stats$dataset.bowler){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
list$score[count_i] <- list$score[count_i] +
(encode(bowler_stats$dataset.year[count_j])*
((20*bowler_stats$dataset.wicketKind[count_j]/bowler_stats$x[count_j]) +
economy_calc(bowler_stats$totalRuns[count_j]/bowler_stats$x[count_j])))
list$playerType <- 1
log=TRUE
}
}
}
# Aggregate stats for batsman
# Extract relevant part of dataframe
batting_data <- data.frame(cbind(dataset$batsman,dataset[,6:14], dataset$wicketKind), dataset$date, dataset$ball, stringsAsFactors = FALSE)
# Extract year from date
batting_data$dataset.year <- substring(batting_data$dataset.date,1,4)
# Aggregating by bowler and year
batsman_stats <- cbind(aggregate(batting_data[,2:10],batting_data[c("dataset.batsman","dataset.year")], FUN = sum),
aggregate(batting_data[,12],batting_data[c("dataset.batsman","dataset.year")], FUN = function(x) length(unique(x))),
aggregate(batting_data$dataset.ball,batting_data[c("dataset.batsman","dataset.year")], FUN = function(balls_faced) length(unique(balls_faced))))
batsman_stats <- batsman_stats[complete.cases(batsman_stats$totalRuns), ]
#Scoring algorithm
count_i = 0
for(i in list$Player){
count_i = count_i + 1
count_j = 0
for(j in batsman_stats$dataset.batsman){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
list$score[count_i] <- list$score[count_i] +
(encode(batsman_stats$dataset.year[count_j])*
((batsman_stats$totalRuns[count_j]/batsman_stats$x[count_j]) +
strike_calc(batsman_stats$totalRuns[count_j]/(batsman_stats[,17][count_j]*batsman_stats$x[count_j]))))
}
}
}
View(list)
View(list)
list$score <- 0
list$playerType <- 0
#Scoring algorithm
count_i = 0
for(i in list$Player){
count_i = count_i + 1
count_j = 0
for(j in bowler_stats$dataset.bowler){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
list$score[count_i] <- list$score[count_i] +
(encode(bowler_stats$dataset.year[count_j])*
((20*bowler_stats$dataset.wicketKind[count_j]/bowler_stats$x[count_j]) +
economy_calc(bowler_stats$totalRuns[count_j]/bowler_stats$x[count_j])))
list$playerType[count_i] <- 1
log=TRUE
}
}
}
View(list)
# Aggregate stats for batsman
# Extract relevant part of dataframe
batting_data <- data.frame(cbind(dataset$batsman,dataset[,6:14], dataset$wicketKind), dataset$date, dataset$ball, stringsAsFactors = FALSE)
# Extract year from date
batting_data$dataset.year <- substring(batting_data$dataset.date,1,4)
# Aggregating by bowler and year
batsman_stats <- cbind(aggregate(batting_data[,2:10],batting_data[c("dataset.batsman","dataset.year")], FUN = sum),
aggregate(batting_data[,12],batting_data[c("dataset.batsman","dataset.year")], FUN = function(x) length(unique(x))),
aggregate(batting_data$dataset.ball,batting_data[c("dataset.batsman","dataset.year")], FUN = function(balls_faced) length(unique(balls_faced))))
batsman_stats <- batsman_stats[complete.cases(batsman_stats$totalRuns), ]
#Scoring algorithm
count_i = 0
for(i in list$Player){
count_i = count_i + 1
count_j = 0
for(j in batsman_stats$dataset.batsman){
count_j = count_j + 1
if(identical(fix_name(j),fix_name(i))){
list$score[count_i] <- list$score[count_i] +
(encode(batsman_stats$dataset.year[count_j])*
((batsman_stats$totalRuns[count_j]/batsman_stats$x[count_j]) +
strike_calc(batsman_stats$totalRuns[count_j]/(batsman_stats[,17][count_j]*batsman_stats$x[count_j]))))
}
}
}
View(list)
constraints
matrix(list$Cost, list$playerType, nrow = 1
matrix(list$Cost, list$playerType, nrow = 1)
matrix(list$Cost, list$playerType, nrow = 1)
constraints <- matrix(list$Cost, nrow = 1)
shape(constraints)
str(constraints)
constraints <- matrix(list$Cost, list$playerType, nrow = 2)
constraints <- matrix(list$Cost, nrow = 2)
constraints <- matrix(list$Cost, nrow = 1)
constraints2 <- matrix(list$playerType, nrow = 1)
cons <- rbind(constraints, constraints2)
c_dir <- "<="
c_rhs <- c(10000000,5)
lp <- lp("max",
obj_fun,
constraints,
c_dir,
c_rhs,
all.bin = TRUE)
list[lp$solution == 1, ]
View(cons)
c_rhs <- c(10000000,6)
lp <- lp("max",
obj_fun,
constraints,
c_dir,
c_rhs,
all.bin = TRUE)
list[lp$solution == 1, ]
c_rhs <- c(10000000,2)
lp <- lp("max",
obj_fun,
constraints,
c_dir,
c_rhs,
all.bin = TRUE)
list[lp$solution == 1, ]
View(lp)
lp <- lp("max",
obj_fun,
cons,
c_dir,
c_rhs,
all.bin = TRUE)
list[lp$solution == 1, ]
c_rhs <- c(10000000,5)
lp <- lp("max",
obj_fun,
cons,
c_dir,
c_rhs,
all.bin = TRUE)
list[lp$solution == 1, ]
pred_score <- sum(lp$solution[lp$solution == 1],)
pred_score <- sum(lp$solution[lp$solution == 1])
pred_score <- sum(lp$solution[lp$solution == 1], 4)
pred_score <- sum(lp$solution[lp$solution == 1], 5)
pred_score <- sum(lp$solution[lp$solution == 1], 5)
pred_score <- sum(list[lp$solution == 1], 5)
pred_score <- sum(list[lp$solution == 1], 4)
pred_score <- sum(list[lp$solution == 1, 4])
pred_cost <- sum(list[lp$solution == 1, 2])
print(list[lp$solution == 1, ])
print(list[lp$solution == 1, 1:5])
print(list[lp$solution == 1,])
save.image("~/R Projects/IPL/IPL R Workspace.RData")
